const request = require("request");
const inquirer = require("inquirer");
const _ = require("lodash");
const URL = require("url");
const npm = require("./npm");
const yarn = require("./yarn");
const config = require("./config");
const utils = require("./utils");
const log = require("./logger");
const pkgOmbiel = require("./fstore")("./package.json", "ombiel");

function getStoredCreds() {
  return npm.get("username")
  .then((username) => {
    if (username) {
      return yarn.command("config", ["get", `${npm.registryBase}omb_token`], "pipe")
      .then((token) => {
        return {
          username: username,
          token: token
        };
      })
      .catch(e => {
        return Promise.reject(e);
      });
    }

    return Promise.reject(new Error("No username found in npm config"));
  })
  .catch(e => {
    return Promise.reject(e);
  });
}

function authenticate(creds, fields) {
  const requestOptions = { form: _.clone(creds) };
  if (fields) {
    requestOptions.form.fields = fields;
  }

  return new Promise(function (resolve, reject) {
    const dc = utils.getDC(creds.username);
    let data;
    requestOptions.form.username = dc.username;

    request.post(`${dc.appManagerBase}/aek/auth/user-details`, requestOptions, function (err, res, body) {
      try {
        data = JSON.parse(body);
      }
      catch (e) { /*nothing*/ }

      if (data && data.token) {
        npm.set("@ombiel:registry", `${config.registry}/`,"")
        .then(function () {
          return npm.set("username", creds.username);
        })
        .then(function () {
          return npm.set("_password", Buffer.from(data.token).toString('base64'));
        })
        .then(function () {
          return yarn.command("config", ["set", `${npm.registryBase}omb_token`, data.token]);
        })
        .then(function () {
          return npm.set("email", data.email);
        })
        .then(function () {
          return npm.set("always-auth", "true");
        })
        .then(function () {
          resolve(_.extend({}, data, { username: creds.username }));
        })
        .catch(function (err2) {
          reject(err2);
        });
      }

      else {
        if (!err) {
          err = Error((data && data.error) || "login failed");
        }
        reject(err);
      }
    });
  });
}

function loginPrompt(fields) {
  return new Promise(function (resolve, reject) {
    npm.get("username")
    .then((username) => {
      const userQuestion = {
        name: "username",
        message: "username",
      };

      if (username) {
        userQuestion.default = username;
      }

      inquirer.prompt([
        userQuestion,
        {
          name: "password",
          message: "password",
          type: "password",
        },
      ], (creds) => {
        resolve(authenticate(creds, fields));
      });
    })
    .catch((e) => {
      reject(e);
    });
  });
}

function renew(fields) {
  return getStoredCreds()
  .then((creds) => {
    return authenticate(creds, fields);
  })
  .catch(() => {
    // don't throw an error; prompt for auth
    return loginPrompt(fields);
  });
}

function login(creds, fields) {
  if (creds && creds.username && creds.password) {
    return authenticate(creds, fields);
  }

  return renew(fields);
}

function logout() {
  return npm.delete("_password")
  .then(function () {
    return yarn.command("config", ["delete", `${npm.registryBase}omb_token`]);
  })
  .then(function () {
    return npm.delete("username");
  })
  .then(function () {
    // we shouldn't need this anymore, but to remove it for folks who still have a legacy NPM omb_token
    return npm.delete("omb_token");
  })
  .then(function () {
    return npm.delete("email");
  })
  .then(function () {
    return npm.delete("always-auth");
  })
  .then(function () {
    const host = URL.parse(config.registry).host.replace(/:/gi, "_");
    npm.command("cache", ["clean", host]);
  });
}

let _userDetails = null;
function getUserDetails(creds) {
  return new Promise((resolve, reject) => {
    if (_userDetails) {
      resolve(_userDetails);
    }
    else {
      login(creds, "apps")
      .then((userDetails) => {
        _userDetails = userDetails;
        resolve(userDetails);
      })
      .catch((e) => {
        reject(e);
      });
    }
  });
}

function getOptionHostnames(opts, data, defaultHost) {
  opts = _.clone(opts);
  return new Promise((resolve) => {
    getUserDetails(data)
    .then((userDetails) => {
      const apps = userDetails.apps;
      if (apps === "all") {
        try {
          const pkgHosts = pkgOmbiel.get("access.write.hosts");
          if (pkgHosts) {
            opts.choices = pkgHosts;
          }
          else {
            opts.default = defaultHost || "mycudev.ombiel.co.uk";
          }
        }
        catch (e) {
          opts.default = defaultHost || "mycudev.ombiel.co.uk";
        }
      }
      else {
        opts.choices = _.map(apps, "hostname");
      }

      resolve(opts);
    })
    .catch((e) => {
      log.error(e);
    });
  });
}

module.exports = { login, renew, authenticate, logout, getUserDetails, getOptionHostnames, getStoredCreds };
