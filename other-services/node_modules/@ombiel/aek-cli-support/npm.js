const spawn = require("cross-spawn");
const _ = require("lodash");
const Utils = require("./utils");
const config = require("./config");
const yarn = require("./yarn");

const registryBase = `${config.registry.replace(/^https?:\/\//,"//")}/:`;

function npmCommand(commandName, options = [], stdio = "inherit", spawnOpts = {}) {  
  return new Promise(function(resolve, reject) {
    let args = _.isArray(options) ? options : Utils.obj2Args(options);
    args = [commandName].concat(args);
    spawnOpts = _.extend({stdio: stdio}, spawnOpts);
    const child = spawn("npm", args, spawnOpts);

    let out = "";
    let err = "";

    if (stdio === "pipe") {
      child.stdout.on("data", (data) => {
        out += data.toString();
      });

      child.stderr.on("data", (data) => {
        err += data.toString();
      });
    }

    child.on("close", (exitCode) => {
      if (stdio === "inherit") {
        if (exitCode === 0) {
          resolve(out);
        }
        else {
          reject(exitCode);
        }
      }
      else if (err) {
        // this is a fix specifically for testing npm commands from within the aek-dev-workspace project
        if (out && err.indexOf("WARN") > -1 && err.indexOf("command does not support workspaces") > -1) {
          resolve(out.trim());
        }
        else {
          reject(err.trim());
        }        
      }
      else {
        resolve(out.trim());
      }
    });
  });
}

function npmCommandJson(commandName, options = []) {
  return npmCommand(commandName, options.concat(["--json"]), "pipe")
  .then((data) => {
    return JSON.parse(data);
  });
}

const command = yarn.command;

const api = yarn.api.inspect;

function view(packageName) {
  const args = packageName ? [packageName] : [];
  return npmCommandJson("info", args).catch(() => { return false; });
}

function npmGet(key) {
  return new Promise((resolve, reject) => {
    npmCommand("config", ["get", registryBase + key], "pipe")
    .then((val) => {
      if (val === "undefined") {
        val = undefined;
      }

      resolve(val);
    })
    .catch((e) => {
      reject(e);
    });
  });
}

function npmSet(key,value, _registryBase = registryBase) {
  return npmCommand("config", ["set", _registryBase + key,value], "ignore");
}

function npmDelete(key) {
  return npmCommand("config", ["delete", registryBase + key], "ignore");
}

module.exports = {command, api, view, get: npmGet, set: npmSet, delete: npmDelete, registryBase};
